# Allows updating dependencies to the latest published tag
#
# Example workflow definition:
#    name: Update Dependencies
#    on:
#      # Run every day.
#      schedule:
#        - cron: '0 3 * * *'
#      # And on on every PR merge so we get the updated dependencies ASAP, and to make sure the changelog doesn't conflict.
#      push:
#        branches:
#          - main
#    jobs:
#      # Update a git submodule
#      cocoa:
#        uses: getsentry/github-workflows/.github/workflows/updater.yml@v1
#        with:
#          path: modules/sentry-cocoa
#          name: Cocoa SDK
#        secrets:
#          api_token: ${{ secrets.CI_DEPLOY_KEY }}
#
#      # Update a properties file
#      cocoa:
#        uses: getsentry/github-workflows/.github/workflows/updater.yml@v1
#        with:
#          path: sentry-cli.properties
#          name: CLI
#        secrets:
#          api_token: ${{ secrets.CI_DEPLOY_KEY }}
on:
  workflow_call:
    inputs:
      path: # submodule path in the source repository
        type: string
        required: true
      name: # Name used for a changelog entry
        type: string
        required: true
    secrets:
      api_token:
        required: true

jobs:
  cancel-previous-run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@a40b8845c0683271d9f53dfcb887a7e181d3918b # Tag: 0.9.1
        with:
          access_token: ${{ github.token }}

  # What we need to accomplish:
  # * update to the latest tag
  # * create a PR
  # * update changelog (including the link to the just created PR)
  #
  # What we actually do is based on whether a PR exists already:
  # * YES it does:
  #    * make the update
  #    * update changelog (with the ID of an existing PR)
  #    * push to the PR
  # * NO it doesn't:
  #    * make the update
  #    * push to a new PR
  #    * update changelog (with the ID of the just created PR)
  #    * push to the PR
  # We do different approach on subsequent runs because otherwise we would spam users' mailboxes
  # with notifications about pushes to existing PRs. This way there is actually no push if not needed.
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.api_token }}

      # In order to run scripts from this repo, we need to check it out manually, doesn't seem available locally.
      - name: Check out workflow scripts
        # Note: cannot use `actions/checkout` at the moment because you can't clone outside of the repo root.
        #       Follow https://github.com/actions/checkout/issues/197
        run: |
          mkdir -p ${{ runner.temp }}/ghwf
          cd ${{ runner.temp }}/ghwf
          git init
          git remote add origin https://github.com/getsentry/github-workflows.git
          # Note: update the ref here when making breaking changes to scripts
          git fetch --depth 1 origin v1
          git checkout FETCH_HEAD

      - name: Update to the latest version
        id: target
        run: ${{ runner.temp }}/ghwf/scripts/update-dependency.ps1 -Path '${{ inputs.path }}'

      - name: Get the base repo info
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: root
        run: |
          $mainBranch = $(git remote show origin | Select-String "HEAD branch: (.*)").Matches[0].Groups[1].Value
          Write-Host '::echo::on'
          Write-Host "::set-output name=baseBranch::$mainBranch"
          Write-Host "::set-output name=prBranch::deps/${{ inputs.path }}/${{ steps.target.outputs.latestTag }}"

      - name: Fetch an existing PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        uses: octokit/request-action@971ad48f9c40ed001c41c2671b1e6e8e8165d5af
        id: existing-pr-request
        with:
          route: GET /repos/${{ github.repository }}/pulls?base={base}&head={head}
          head: '${{ github.repository }}:${{ steps.root.outputs.prBranch }}'
          base: '${{ steps.root.outputs.baseBranch }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse the existing PR number
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: existing-pr
        run: |
          $data = @'
          ${{ steps.existing-pr-request.outputs.data }}
          '@

          $prCount = $($data | jq '. | length')

          if ($prCount -eq '0')
          {
              $number = ''
          }
          elseif ($prCount -eq '1')
          {
              $number = $($data | Select-String '"number": +([0-9]+)').Matches[0].Groups[1].Value
          }
          else
          {
              throw "Unexpected number of PRs matched: $prCount"
          }

          Write-Host '::echo::on'
          Write-Host "::set-output name=number::$number"

      - run: git --no-pager diff
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.number == '') }}

      # First we create a PR only if it doesn't exist. We will later overwrite the content with the same action.
      - name: Create a PR
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.number == '') }}
        uses: peter-evans/create-pull-request@f22a7da129c901513876a2380e2dae9f8e145330
        id: create-pr
        with:
          base: ${{ steps.root.outputs.baseBranch }}
          branch: ${{ steps.root.outputs.prBranch }}
          add-paths: '${{ inputs.path }}'
          author: 'GitHub <noreply@github.com>'
          title: 'chore(deps): update ${{ inputs.name }} to ${{ steps.target.outputs.latestTagNice }}'
          # draft: true

      - name: Verify we have a PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        id: pr
        run: |
          Write-Host '::echo::on'
          if ('${{ steps.create-pr.outputs.pull-request-number }}' -ne '')
          {
              Write-Host "::set-output name=number::${{ steps.create-pr.outputs.pull-request-number }}"
          }
          elseif ('${{ steps.existing-pr.outputs.number }}' -ne '')
          {
              Write-Host "::set-output name=number::${{ steps.existing-pr.outputs.number }}"
          }
          else
          {
              throw "PR hasn't been created"
          }

      # If we had to create a new PR, we must do a clean checkout & update the submodule again.
      # If we didn't do this, the new PR would only have a changelog...
      - name: 'After new PR: restore repo'
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.number == '') }}
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.api_token }}

      - name: 'After new PR: redo the update'
        if: ${{ ( steps.target.outputs.latestTag != steps.target.outputs.originalTag ) && ( steps.existing-pr.outputs.number == '') }}
        run: ${{ runner.temp }}/ghwf/scripts/update-dependency.ps1 -Path '${{ inputs.path }}' -Tag '${{ steps.target.outputs.latestTag }}'

      - name: Update Changelog
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        run: |
          ${{ runner.temp }}/ghwf/scripts/update-changelog.ps1 `
            -Name '${{ inputs.name }}' `
            -PR ${{ steps.pr.outputs.number }} `
            -RepoUrl '${{ steps.target.outputs.url }}' `
            -MainBranch '${{ steps.target.outputs.mainBranch }}' `
            -OldTag '${{ steps.target.outputs.originalTag }}' `
            -NewTag '${{ steps.target.outputs.latestTag }}'

      - run: git --no-pager diff
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag

      # Now make the PR in its final state. This way we only have one commit and no updates if there are no changes between runs.
      - name: Update the PR
        if: steps.target.outputs.latestTag != steps.target.outputs.originalTag
        uses: peter-evans/create-pull-request@f22a7da129c901513876a2380e2dae9f8e145330
        with:
          base: ${{ steps.root.outputs.baseBranch }}
          branch: ${{ steps.root.outputs.prBranch }}
          commit-message: 'chore: update ${{ inputs.path }} to ${{ steps.target.outputs.latestTag }}'
          author: 'GitHub <noreply@github.com>'
          title: 'chore(deps): update ${{ inputs.name }} to ${{ steps.target.outputs.latestTagNice }}'
          body: |
            Bumps ${{ inputs.path }} from ${{ steps.target.outputs.originalTag }} to ${{ steps.target.outputs.latestTag }}.

            Auto-generated by a submodule dependency updater.
          labels: dependencies
